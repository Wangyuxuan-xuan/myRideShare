// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    TripDTO,
    TripPostDTO,
} from '../models';

export interface CreateTripRequest {
    tripPostDTO: TripPostDTO;
}

export interface DeleteByTripIdRequest {
    tripId: number;
}

export interface GetTripByIdRequest {
    tripId: number;
}

export interface SearchTripsRequest {
    departure: string;
    destination: string;
    dateTime: string;
}

export interface UpdateCarRequest {
    tripId: number;
    tripPostDTO: TripPostDTO;
}

/**
 * no description
 */
export class TripControllerApi extends BaseAPI {

    /**
     */
    createTrip({ tripPostDTO }: CreateTripRequest): Observable<TripDTO>
    createTrip({ tripPostDTO }: CreateTripRequest, opts?: OperationOpts): Observable<RawAjaxResponse<TripDTO>>
    createTrip({ tripPostDTO }: CreateTripRequest, opts?: OperationOpts): Observable<TripDTO | RawAjaxResponse<TripDTO>> {
        throwIfNullOrUndefined(tripPostDTO, 'tripPostDTO', 'createTrip');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TripDTO>({
            url: '/api/trips/create',
            method: 'POST',
            headers,
            body: tripPostDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteByTripId({ tripId }: DeleteByTripIdRequest): Observable<void>
    deleteByTripId({ tripId }: DeleteByTripIdRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteByTripId({ tripId }: DeleteByTripIdRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(tripId, 'tripId', 'deleteByTripId');

        return this.request<void>({
            url: '/api/trips/{tripId}'.replace('{tripId}', encodeURI(tripId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    getAllTrips(): Observable<Array<TripDTO>>
    getAllTrips(opts?: OperationOpts): Observable<RawAjaxResponse<Array<TripDTO>>>
    getAllTrips(opts?: OperationOpts): Observable<Array<TripDTO> | RawAjaxResponse<Array<TripDTO>>> {
        return this.request<Array<TripDTO>>({
            url: '/api/trips/trips/all',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    getTripById({ tripId }: GetTripByIdRequest): Observable<TripDTO>
    getTripById({ tripId }: GetTripByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<TripDTO>>
    getTripById({ tripId }: GetTripByIdRequest, opts?: OperationOpts): Observable<TripDTO | RawAjaxResponse<TripDTO>> {
        throwIfNullOrUndefined(tripId, 'tripId', 'getTripById');

        return this.request<TripDTO>({
            url: '/api/trips/{tripId}'.replace('{tripId}', encodeURI(tripId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    searchTrips({ departure, destination, dateTime }: SearchTripsRequest): Observable<Array<TripDTO>>
    searchTrips({ departure, destination, dateTime }: SearchTripsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<TripDTO>>>
    searchTrips({ departure, destination, dateTime }: SearchTripsRequest, opts?: OperationOpts): Observable<Array<TripDTO> | RawAjaxResponse<Array<TripDTO>>> {
        throwIfNullOrUndefined(departure, 'departure', 'searchTrips');
        throwIfNullOrUndefined(destination, 'destination', 'searchTrips');
        throwIfNullOrUndefined(dateTime, 'dateTime', 'searchTrips');

        const dateTimeDate = new Date(dateTime);
        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'departure': departure,
            'destination': destination,
            'dateTime': (dateTimeDate as any).toISOString(),
        };

        return this.request<Array<TripDTO>>({
            url: '/api/trips/trips',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    updateCar({ tripId, tripPostDTO }: UpdateCarRequest): Observable<void>
    updateCar({ tripId, tripPostDTO }: UpdateCarRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateCar({ tripId, tripPostDTO }: UpdateCarRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(tripId, 'tripId', 'updateCar');
        throwIfNullOrUndefined(tripPostDTO, 'tripPostDTO', 'updateCar');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/trips/update/{tripId}'.replace('{tripId}', encodeURI(tripId)),
            method: 'PUT',
            headers,
            body: tripPostDTO,
        }, opts?.responseOpts);
    };

}
