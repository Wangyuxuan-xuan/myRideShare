// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CarDTO,
    CarUpdateDTO,
} from '../models';

export interface CreateCarRequest {
    model?: string;
    licensePlate?: string;
    carType?: CreateCarCarTypeEnum;
    carYear?: string;
    numOfPassenger?: number;
    picture?: Blob;
    driverId?: number;
}

export interface DeleteByCarIdRequest {
    carId: number;
}

export interface GetCarByIdRequest {
    carId: number;
}

export interface UpdateCar1Request {
    carUpdateDTO: CarUpdateDTO;
}

/**
 * no description
 */
export class CarControllerApi extends BaseAPI {

    /**
     */
    createCar({ model, licensePlate, carType, carYear, numOfPassenger, picture, driverId }: CreateCarRequest): Observable<CarDTO>
    createCar({ model, licensePlate, carType, carYear, numOfPassenger, picture, driverId }: CreateCarRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CarDTO>>
    createCar({ model, licensePlate, carType, carYear, numOfPassenger, picture, driverId }: CreateCarRequest, opts?: OperationOpts): Observable<CarDTO | RawAjaxResponse<CarDTO>> {

        const formData = new FormData();
        if (model !== undefined) { formData.append('model', model as any); }
        if (licensePlate !== undefined) { formData.append('licensePlate', licensePlate as any); }
        if (carType !== undefined) { formData.append('carType', carType as any); }
        if (carYear !== undefined) { formData.append('carYear', carYear as any); }
        if (numOfPassenger !== undefined) { formData.append('numOfPassenger', numOfPassenger as any); }
        if (picture !== undefined) { formData.append('picture', picture as any); }
        if (driverId !== undefined) { formData.append('driverId', driverId as any); }

        return this.request<CarDTO>({
            url: '/api/cars/create',
            method: 'POST',
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteByCarId({ carId }: DeleteByCarIdRequest): Observable<void>
    deleteByCarId({ carId }: DeleteByCarIdRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteByCarId({ carId }: DeleteByCarIdRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(carId, 'carId', 'deleteByCarId');

        return this.request<void>({
            url: '/api/cars/{carId}'.replace('{carId}', encodeURI(carId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    getAllCars(): Observable<Array<CarDTO>>
    getAllCars(opts?: OperationOpts): Observable<RawAjaxResponse<Array<CarDTO>>>
    getAllCars(opts?: OperationOpts): Observable<Array<CarDTO> | RawAjaxResponse<Array<CarDTO>>> {
        return this.request<Array<CarDTO>>({
            url: '/api/cars/drivers',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    getCarById({ carId }: GetCarByIdRequest): Observable<CarDTO>
    getCarById({ carId }: GetCarByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CarDTO>>
    getCarById({ carId }: GetCarByIdRequest, opts?: OperationOpts): Observable<CarDTO | RawAjaxResponse<CarDTO>> {
        throwIfNullOrUndefined(carId, 'carId', 'getCarById');

        return this.request<CarDTO>({
            url: '/api/cars/{carId}'.replace('{carId}', encodeURI(carId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    updateCar1({ carUpdateDTO }: UpdateCar1Request): Observable<void>
    updateCar1({ carUpdateDTO }: UpdateCar1Request, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateCar1({ carUpdateDTO }: UpdateCar1Request, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(carUpdateDTO, 'carUpdateDTO', 'updateCar1');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/cars/update',
            method: 'PUT',
            headers,
            body: carUpdateDTO,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum CreateCarCarTypeEnum {
    CAR_TYPE = 'CAR_TYPE'
}
